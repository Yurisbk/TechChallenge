name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  dockerhub:
    name: Executando primeiro job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Docker Login
        uses: docker/login-action@v1
        with:
          username: 'yurisbk'
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: yurisbk/techchallenge_imagem:latest

  build_and_test:
    name: Executando segundo job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.204'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Run tests
        run: dotnet test --no-build --verbosity normal

  sonarqube_analysis:
    name: Executando terceiro job
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: 17

      - name: Cache SonarQube packages
        uses: actions/cache@v2
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v2
        with:
          path: .sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p .sonar/scanner
          dotnet tool install dotnet-sonarscanner --tool-path .sonar/scanner

      - name: Build and analyze
        run: |
          .sonar/scanner/dotnet-sonarscanner begin /k:"Techchallenge" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:distributio=manual
          dotnet build
          .sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
